// <auto-generated />
using System;
using GemSto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GemSto.Data.Migrations
{
    [DbContext(typeof(GemStoContext))]
    [Migration("20210217144812_addedthirdpartycolumntoge")]
    partial class addedthirdpartycolumntoge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GemSto.Domain.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApproverId");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("GemSto.Domain.BuyerLotPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<string>("GemSaleIdsAsString")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("Id");

                    b.ToTable("BuyerLotPayment");
                });

            modelBuilder.Entity("GemSto.Domain.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertURL")
                        .HasMaxLength(8000);

                    b.Property<int>("CertificateProviderId");

                    b.Property<DateTimeOffset?>("CertifiedDate");

                    b.Property<int>("ColourId");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<int>("GemId");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsTreated");

                    b.Property<string>("Number")
                        .HasMaxLength(1000);

                    b.Property<int?>("OriginId");

                    b.Property<int?>("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("CertificateProviderId");

                    b.HasIndex("ColourId");

                    b.HasIndex("GemId");

                    b.HasIndex("OriginId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("GemSto.Domain.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateProviderId");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int?>("GemId");

                    b.Property<bool>("IsCertified");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsThirdParty");

                    b.Property<bool?>("IsTreated");

                    b.Property<string>("Owner")
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset?>("RecievedDate");

                    b.Property<int?>("ShapeId");

                    b.Property<DateTimeOffset>("SubmissionDate");

                    b.Property<int?>("VarietyId");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CertificateProviderId");

                    b.HasIndex("GemId");

                    b.HasIndex("ShapeId");

                    b.HasIndex("VarietyId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("GemSto.Domain.Export", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<DateTimeOffset>("ExportDate");

                    b.Property<int>("ExportNumber");

                    b.Property<int>("ExportType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExportClosed");

                    b.Property<int>("OriginId");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.ToTable("Exports");
                });

            modelBuilder.Entity("GemSto.Domain.Gem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BrokerFee");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<decimal>("Depth");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int?>("GemLotId");

                    b.Property<int>("GemStatus");

                    b.Property<Guid>("Identity");

                    b.Property<decimal>("InitialCost");

                    b.Property<decimal>("InitialWeight");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGemLot");

                    b.Property<bool>("IsThirdParty");

                    b.Property<bool?>("IsTreated");

                    b.Property<decimal>("Length");

                    b.Property<string>("Note")
                        .HasMaxLength(4000);

                    b.Property<int>("NumberOfPieces");

                    b.Property<int>("PaymentStatusToSeller");

                    b.Property<DateTimeOffset?>("PurchasedDate");

                    b.Property<int?>("RecutShapeId");

                    b.Property<decimal>("RecutWeight");

                    b.Property<int?>("SellerId");

                    b.Property<string>("SellerName")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SellingPrice");

                    b.Property<int?>("ShapeId");

                    b.Property<decimal>("Share");

                    b.Property<string>("StockNumber")
                        .HasMaxLength(500);

                    b.Property<decimal>("TotalAmountPaidToSeller");

                    b.Property<decimal>("TotalCost");

                    b.Property<int?>("VarietyId");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.HasIndex("GemLotId");

                    b.HasIndex("RecutShapeId");

                    b.HasIndex("SellerId");

                    b.HasIndex("ShapeId");

                    b.HasIndex("StockNumber")
                        .IsUnique()
                        .HasFilter("[StockNumber] IS NOT NULL");

                    b.HasIndex("VarietyId");

                    b.ToTable("Gems");
                });

            modelBuilder.Entity("GemSto.Domain.GemApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApprovalId");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int>("GemId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("GemId");

                    b.ToTable("GemApprovals");
                });

            modelBuilder.Entity("GemSto.Domain.GemExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateProviderId");

                    b.Property<int?>("ColourId");

                    b.Property<string>("Cost")
                        .HasMaxLength(200);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<Guid>("ExportId");

                    b.Property<int?>("GemId");

                    b.Property<int?>("GemStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsThirdParty");

                    b.Property<bool?>("IsTreated");

                    b.Property<int>("Number");

                    b.Property<int?>("OriginId");

                    b.Property<string>("Owner")
                        .HasMaxLength(200);

                    b.Property<int?>("ShapeId");

                    b.Property<int?>("VarietyId");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CertificateProviderId");

                    b.HasIndex("ColourId");

                    b.HasIndex("ExportId");

                    b.HasIndex("GemId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ShapeId");

                    b.HasIndex("VarietyId");

                    b.ToTable("GemExports");
                });

            modelBuilder.Entity("GemSto.Domain.GemHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionEnum");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int>("GemHistoryStatusEnum");

                    b.Property<int?>("GemId");

                    b.Property<int>("GemStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RelatedEntityId");

                    b.Property<int>("RelatedEntityNameEnum");

                    b.HasKey("Id");

                    b.ToTable("GemHistory");
                });

            modelBuilder.Entity("GemSto.Domain.GemLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BrokerFee");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("PaymentStatusToSeller");

                    b.Property<decimal>("TotalAmountPaidToSeller");

                    b.Property<decimal>("TotalCost");

                    b.HasKey("Id");

                    b.ToTable("GemLots");
                });

            modelBuilder.Entity("GemSto.Domain.GemSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BuyerId");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(200);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int?>("GemApprovalId");

                    b.Property<int?>("GemExportId");

                    b.Property<int?>("GemId");

                    b.Property<bool?>("IsCertificatePending");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSingleSale");

                    b.Property<bool>("IsThirdParty");

                    b.Property<bool?>("IsTreated");

                    b.Property<int>("NumberOfPieces");

                    b.Property<int>("PaymentStatus");

                    b.Property<Guid?>("SaleId");

                    b.Property<string>("SaleNumber")
                        .HasMaxLength(200);

                    b.Property<decimal>("SellingRate");

                    b.Property<int?>("ShapeId");

                    b.Property<string>("ThirdPartyOwner")
                        .HasMaxLength(200);

                    b.Property<decimal?>("TotalAmount");

                    b.Property<decimal>("TotalAmountPaid");

                    b.Property<int?>("VarietyId");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("GemApprovalId");

                    b.HasIndex("GemExportId");

                    b.HasIndex("GemId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleNumber")
                        .IsUnique()
                        .HasFilter("[SaleNumber] IS NOT NULL");

                    b.HasIndex("ShapeId");

                    b.HasIndex("VarietyId");

                    b.ToTable("GemSales");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Approver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsProfileCreated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Approvers");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.CertificateProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agent")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("CertificateProviders");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Colours");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Shape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Shapes");
                });

            modelBuilder.Entity("GemSto.Domain.LookUp.Variety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Varieties");
                });

            modelBuilder.Entity("GemSto.Domain.MiscCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("HasSubCategory");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("MiscCategory");
                });

            modelBuilder.Entity("GemSto.Domain.MiscPayments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ParticipantId");

                    b.Property<string>("ParticipantName")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("PaymentDate");

                    b.Property<int>("PrimaryMiscCat");

                    b.Property<int?>("SubMiscCat");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PrimaryMiscCat");

                    b.HasIndex("SubMiscCat");

                    b.ToTable("MiscPayments");
                });

            modelBuilder.Entity("GemSto.Domain.MiscSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MiscCategoryId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MiscCategoryId");

                    b.ToTable("MiscSubCategories");
                });

            modelBuilder.Entity("GemSto.Domain.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Commission");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Note")
                        .HasMaxLength(4000);

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("GemSto.Domain.SalePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmmountPaid");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int>("GemSalesId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPaymentApproved");

                    b.Property<int>("PaymentType");

                    b.Property<Guid?>("SaleId");

                    b.HasKey("Id");

                    b.HasIndex("GemSalesId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalePayments");
                });

            modelBuilder.Entity("GemSto.Domain.SellerLotPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<string>("GemIdsAsString")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("Id");

                    b.ToTable("SellerLotPayment");
                });

            modelBuilder.Entity("GemSto.Domain.ThirdPartyCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificationId");

                    b.Property<DateTimeOffset?>("CertifiedDate");

                    b.Property<int>("ColourId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Depth");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsTreated");

                    b.Property<decimal?>("Length");

                    b.Property<string>("Number")
                        .HasMaxLength(1000);

                    b.Property<int?>("OriginId");

                    b.Property<int>("ShapeId");

                    b.Property<decimal?>("Weight");

                    b.Property<decimal?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId")
                        .IsUnique();

                    b.HasIndex("ColourId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ShapeId");

                    b.ToTable("ThirdPartyCertificates");
                });

            modelBuilder.Entity("GemSto.Domain.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditedById")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("EditedOn");

                    b.Property<int>("GemId");

                    b.Property<int?>("GemStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("PaidAmount");

                    b.Property<DateTimeOffset?>("PaidOn");

                    b.Property<int>("Remark");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("GemId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GemSto.Domain.User.StoreUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TelephoneLineTwo");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GemSto.Domain.User.UserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEvent");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("UserAudits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GemSto.Domain.Approval", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.Approver", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GemSto.Domain.Certificate", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.CertificateProvider", "CertificateProvider")
                        .WithMany()
                        .HasForeignKey("CertificateProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.LookUp.Colour", "Colour")
                        .WithMany()
                        .HasForeignKey("ColourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.Gem", "Gem")
                        .WithMany("Certificates")
                        .HasForeignKey("GemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.LookUp.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("GemSto.Domain.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("GemSto.Domain.Certification", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.CertificateProvider", "CertificateProvider")
                        .WithMany()
                        .HasForeignKey("CertificateProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.Gem", "Gem")
                        .WithMany()
                        .HasForeignKey("GemId");

                    b.HasOne("GemSto.Domain.LookUp.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId");

                    b.HasOne("GemSto.Domain.LookUp.Variety", "Variety")
                        .WithMany()
                        .HasForeignKey("VarietyId");
                });

            modelBuilder.Entity("GemSto.Domain.Export", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GemSto.Domain.Gem", b =>
                {
                    b.HasOne("GemSto.Domain.GemLot", "GemLot")
                        .WithMany("Gems")
                        .HasForeignKey("GemLotId");

                    b.HasOne("GemSto.Domain.LookUp.Shape", "RecutShape")
                        .WithMany()
                        .HasForeignKey("RecutShapeId");

                    b.HasOne("GemSto.Domain.LookUp.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("GemSto.Domain.LookUp.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId");

                    b.HasOne("GemSto.Domain.LookUp.Variety", "Variety")
                        .WithMany()
                        .HasForeignKey("VarietyId");
                });

            modelBuilder.Entity("GemSto.Domain.GemApproval", b =>
                {
                    b.HasOne("GemSto.Domain.Approval", "Approval")
                        .WithMany("GemApprovals")
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.Gem", "Gem")
                        .WithMany()
                        .HasForeignKey("GemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GemSto.Domain.GemExport", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.CertificateProvider", "CertificateProvider")
                        .WithMany()
                        .HasForeignKey("CertificateProviderId");

                    b.HasOne("GemSto.Domain.LookUp.Colour", "Colour")
                        .WithMany()
                        .HasForeignKey("ColourId");

                    b.HasOne("GemSto.Domain.Export", "Export")
                        .WithMany("GemExports")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.Gem", "Gem")
                        .WithMany("GemExports")
                        .HasForeignKey("GemId");

                    b.HasOne("GemSto.Domain.LookUp.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("GemSto.Domain.LookUp.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId");

                    b.HasOne("GemSto.Domain.LookUp.Variety", "Variety")
                        .WithMany()
                        .HasForeignKey("VarietyId");
                });

            modelBuilder.Entity("GemSto.Domain.GemSales", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("GemSto.Domain.GemApproval", "GemApproval")
                        .WithMany()
                        .HasForeignKey("GemApprovalId");

                    b.HasOne("GemSto.Domain.GemExport", "GemExport")
                        .WithMany()
                        .HasForeignKey("GemExportId");

                    b.HasOne("GemSto.Domain.Gem", "Gem")
                        .WithMany()
                        .HasForeignKey("GemId");

                    b.HasOne("GemSto.Domain.Sale", "Sale")
                        .WithMany("GemSales")
                        .HasForeignKey("SaleId");

                    b.HasOne("GemSto.Domain.LookUp.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId");

                    b.HasOne("GemSto.Domain.LookUp.Variety", "Variety")
                        .WithMany()
                        .HasForeignKey("VarietyId");
                });

            modelBuilder.Entity("GemSto.Domain.MiscPayments", b =>
                {
                    b.HasOne("GemSto.Domain.LookUp.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("GemSto.Domain.MiscCategory", "MiscCategory")
                        .WithMany()
                        .HasForeignKey("PrimaryMiscCat")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.MiscSubCategory", "MiscSubCategory")
                        .WithMany()
                        .HasForeignKey("SubMiscCat");
                });

            modelBuilder.Entity("GemSto.Domain.MiscSubCategory", b =>
                {
                    b.HasOne("GemSto.Domain.MiscCategory", "MiscCategory")
                        .WithMany("MiscSubCategories")
                        .HasForeignKey("MiscCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GemSto.Domain.SalePayment", b =>
                {
                    b.HasOne("GemSto.Domain.GemSales", "GemSales")
                        .WithMany("SalePayments")
                        .HasForeignKey("GemSalesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.Sale", "Sale")
                        .WithMany("SalePayments")
                        .HasForeignKey("SaleId");
                });

            modelBuilder.Entity("GemSto.Domain.ThirdPartyCertificate", b =>
                {
                    b.HasOne("GemSto.Domain.Certification", "Certification")
                        .WithOne("ThirdPartyCertificate")
                        .HasForeignKey("GemSto.Domain.ThirdPartyCertificate", "CertificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.LookUp.Colour", "Colour")
                        .WithMany()
                        .HasForeignKey("ColourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.LookUp.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("GemSto.Domain.LookUp.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GemSto.Domain.Transaction", b =>
                {
                    b.HasOne("GemSto.Domain.Gem", "Gem")
                        .WithMany("Transactions")
                        .HasForeignKey("GemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GemSto.Domain.User.StoreUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GemSto.Domain.User.StoreUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GemSto.Domain.User.StoreUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GemSto.Domain.User.StoreUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
